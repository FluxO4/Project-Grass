// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

RWStructuredBuffer<float3> _Positions;

uint pcg_hash(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return ((word >> 22u) ^ word);
}

uint chunkSize;
uint chunkCentreX;
uint chunkCentreZ;

float3 grassBladeCentre (uint3 id){
    return float3(pcg_hash(id.x)*0.00000000023283064365386962890625*chunkSize - chunkSize * 0.5, 0, pcg_hash(id.x)*0.00000000023283064365386962890625*chunkSize - chunkSize * 0.5);
}


// * 0.00000000023283064365386962890625 (from 0 to 10)

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 grassPos = grassBladeCentre(id);
    //_Positions[id.xyz] = grassPos;


    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
